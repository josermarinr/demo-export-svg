{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","className","onClick","svgExport","id","titleToExport","options","fontFamily","url","LineChart","data","name","uv","pv","amt","height","width","margin","top","right","left","bottom","XAxis","dataKey","YAxis","CartesianGrid","strokeDasharray","Tooltip","Legend","wrapperStyle","Line","type","stroke","activeDot","r","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTA2EeA,MA9Df,WAWI,OACI,sBAAKC,UAAU,MAAf,UACI,0BACA,8BACI,+BACI,wBAAQC,QACJ,WACIC,oBAAU,CACNC,GAAG,YACHC,cAAc,UACdC,QAAS,CACLC,WAAY,CACRC,IAAK,mEACLD,WAAY,kBARhC,0BAgBR,+DAEA,qBAAKH,GAAI,YAAT,SACI,eAACK,EAAA,EAAD,CACIC,KAnCH,CACT,CAAEC,KAAM,SAAUC,GAAI,IAAMC,GAAI,KAAMC,IAAK,MAC3C,CAAEH,KAAM,SAAUC,GAAI,IAAMC,GAAI,KAAMC,IAAK,MAC3C,CAAEH,KAAM,SAAUC,GAAI,IAAMC,GAAI,KAAMC,IAAK,MAC3C,CAAEH,KAAM,SAAUC,GAAI,KAAMC,GAAI,KAAMC,IAAK,KAC3C,CAAEH,KAAM,SAAUC,GAAI,KAAMC,GAAI,KAAMC,IAAK,MAC3C,CAAEH,KAAM,SAAUC,GAAI,KAAMC,GAAI,KAAMC,IAAK,MAC3C,CAAEH,KAAM,SAAUC,GAAI,KAAMC,GAAI,KAAMC,IAAK,OA6B/BC,OAAQ,IACRC,MAAO,IACPC,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAJnD,UAMI,cAACC,EAAA,EAAD,CAAOC,QAAQ,SACf,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAQC,aAAc,CAAER,OAAQ,KAChC,cAACS,EAAA,EAAD,CACIC,KAAK,WACLR,QAAQ,KACRS,OAAO,UACPC,UAAW,CAAEC,EAAG,KAEpB,cAACJ,EAAA,EAAD,CAAMC,KAAK,WAAWR,QAAQ,KAAKS,OAAO,iBAIlD,wBAAQ5B,GAAG,UAAUY,MAAM,OAAOD,OAAO,YCvDtCoB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.866c18d8.chunk.js","sourcesContent":["import React  from \"react\";\nimport \"./App.css\";\nimport {\n    CartesianGrid,\n    Legend,\n    Line,\n    LineChart,\n    Tooltip,\n    XAxis,\n    YAxis,\n} from \"recharts\";\nimport {svgExport} from 'svg-in-png'\n\nfunction App() {\n    const data = [\n        { name: \"Page A\", uv: 4000, pv: 2400, amt: 2400 },\n        { name: \"Page B\", uv: 3000, pv: 1398, amt: 2210 },\n        { name: \"Page C\", uv: 2000, pv: 9800, amt: 2290 },\n        { name: \"Page D\", uv: 2780, pv: 3908, amt: 2000 },\n        { name: \"Page E\", uv: 1890, pv: 4800, amt: 2181 },\n        { name: \"Page F\", uv: 2390, pv: 3800, amt: 2500 },\n        { name: \"Page G\", uv: 3490, pv: 4300, amt: 2100 },\n    ];\n\n    return (\n        <div className=\"App\">\n            <style></style>\n            <div>\n                <span >\n                    <button onClick={\n                        ()=>{\n                            svgExport({\n                                id:\"thisChart\",\n                                titleToExport:\"example\",\n                                options: {\n                                    fontFamily: {\n                                        url: 'https://fonts.googleapis.com/css2?family=Sigmar+One&display=swap',\n                                        fontFamily: \"Sigmar One\"\n                                    }\n                                }\n                            })\n                        }\n                        }>Download</button>\n                </span>\n            </div>\n            <h2>this is a title of your chart</h2>\n\n            <div id={\"thisChart\"}>\n                <LineChart\n                    data={data}\n                    height={300}\n                    width={600}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 25 }}\n                >\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <Tooltip />\n                    <Legend wrapperStyle={{ bottom: 5 }} />\n                    <Line\n                        type=\"monotone\"\n                        dataKey=\"pv\"\n                        stroke=\"#8884d8\"\n                        activeDot={{ r: 8 }}\n                    />\n                    <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\n                </LineChart>\n            </div>\n\n            <canvas id=\"canvas1\" width=\"1000\" height=\"400\"></canvas>\n        </div>\n\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}